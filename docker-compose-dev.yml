volumes:
  postgres_data: {}
  postgres_data_backups: {}
  mongo-data: {}
  redis-data: {}

secrets:
  mongo_user:
    file: ./secrets/mongo_user.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

services:
  mongodb:
    image: mongodb/mongodb-community-server:8.0-ubi9
    container_name: mongodb
    restart: unless-stopped
    command: ["mongod", "--noauth"]
    environment:
      - TZ=America/Guayaquil
    volumes:
      - mongo-data:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      archivos:
        ipv4_address: 30.30.1.10

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      archivos:
        ipv4_address: 30.30.1.12

  postgresdb:
    image: postgres:17.0-alpine
    container_name: postgresdb
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_data_backups:/backups
    env_file:
      - ./back-users/.envs/postgres.env
    ports:
      - "5454:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      archivos:
        ipv4_address: 30.30.1.5

  back-files:
    build:
      context: .
      dockerfile: ./back-files/.compose/local/Dockerfile
    image: back-files
    restart: unless-stopped
    container_name: back-files
    volumes:
      - ./back-files/app:/code/app
      - ./back-files/repo:/code/repo
      - ./back-files/pytest.ini:/code/pytest.ini
    env_file:
      - ./back-files/.envs/mongo.env
    ports:
      - 8082:8080
      - 5680:5678
    secrets:
      - jwt_secret
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "-H", "Accept: application/json", "http://localhost:8080/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      archivos:
        ipv4_address: 30.30.1.7
      gateway:
        ipv4_address: 10.10.1.3

  back-logs:
    build:
      context: .
      dockerfile: ./back-logs/.compose/local/Dockerfile
    image: back-logs
    restart: unless-stopped
    container_name: back-logs
    volumes:
      - ./back-logs/./app:/code/app
    env_file:
      - ./back-logs/.envs/mongo.env
    ports:
      - 8083:8080
      - 5681:5678

    healthcheck:
      test: curl --fail -G http://30.30.1.8:8080/api/v1/health/ || exit 1
      interval: 60s
      timeout: 5s
      retries: 5

    networks:
      archivos:
        ipv4_address: 30.30.1.8
      gateway:
        ipv4_address: 10.10.1.4

  back-users:
    image: openjdk:21-jdk-slim
    container_name: back-users
    ports:
      - "8090:8090"
    volumes:
      - ./back-users/target/users-0.0.1-SNAPSHOT.jar:/app.jar
    command: ["java", "-jar", "/app.jar"]
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    restart: unless-stopped
    networks:
      gateway:
        ipv4_address: 10.10.1.5
      archivos:
        ipv4_address: 30.30.1.9

  back-options:
    image: openjdk:21-jdk-slim
    container_name: back-options
    ports:
      - "8091:8091"
    volumes:
      - ./back-options/target/options-0.0.1-SNAPSHOT.jar:/app.jar
    command: ["java", "-jar", "/app.jar"]
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    restart: unless-stopped
    networks:
      gateway:
        ipv4_address: 10.10.1.6
      archivos:
        ipv4_address: 30.30.1.11

  front-files:
    build:
      context: .
      dockerfile: ./front-files/.compose/dev/Dockerfile
    image: front-files
    container_name: front-files
    ports:
      - "3001:3000"
    volumes:
      - ./front-files:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8082/api/v1
      - REACT_APP_ENV=development
    restart: unless-stopped
    depends_on:
      - back-files
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      gateway:
        ipv4_address: 10.10.1.7

networks:
  archivos:
    name: archivos
    driver: bridge
    ipam:
      config:
        - subnet: 30.30.1.0/24
  gateway:
    name: gateway
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.1.0/24
